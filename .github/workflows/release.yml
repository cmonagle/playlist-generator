name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: playlist-generator-linux-x86_64.tar.gz
          
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: playlist-generator-linux-aarch64.tar.gz
          
          # macOS x86_64 (Intel)
          - target: x86_64-apple-darwin
            os: macos-latest
            name: playlist-generator-macos-x86_64.tar.gz
          
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: playlist-generator-macos-aarch64.tar.gz
          
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: playlist-generator-windows-x86_64.zip
          
          # Windows ARM64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: playlist-generator-windows-aarch64.zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Configure cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        mkdir -p ~/.cargo
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.name }} playlist-generator
        cd ../../../

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.name }} playlist-generator.exe
        cd ../../../

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Move artifacts to root
      run: |
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} mv {} .

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Features" >> $GITHUB_OUTPUT
        echo "- Playlist generation using OpenSubsonic API" >> $GITHUB_OUTPUT
        echo "- Support for various metadata-based filters" >> $GITHUB_OUTPUT
        echo "- Configurable playlist generation heuristics" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Supported Platforms" >> $GITHUB_OUTPUT
        echo "- Linux (x86_64, ARM64)" >> $GITHUB_OUTPUT
        echo "- macOS (Intel, Apple Silicon)" >> $GITHUB_OUTPUT
        echo "- Windows (x86_64, ARM64)" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          *.zip
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
